openapi: 3.0.3
info:
  title: ChatFlow API
  description: A minimal but clean WhatsApp-style messaging app API
  version: 1.0.0
  contact:
    name: ChatFlow Team
servers:
  - url: http://localhost:3002/v1
    description: Development server
  - url: https://chatflow-backend-3w6u4kmniq-ue.a.run.app/v1
    description: Production server (Cloud Run)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          format: email
        displayName:
          type: string
        avatarUrl:
          type: string
          nullable: true
        isOnline:
          type: boolean
        lastSeen:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    Conversation:
      type: object
      properties:
        id:
          type: string
          pattern: '^conv_[0-9]+_[a-z0-9]+$'
          description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
          example: 'conv_1750386041311_fpmswok2p'
        createdBy:
          type: string
          format: email
        type:
          type: string
          enum: [DIRECT, GROUP]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ConversationParticipant'

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          pattern: '^conv_[0-9]+_[a-z0-9]+$'
          description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
          example: 'conv_1750386041311_fpmswok2p'
        senderId:
          type: string
          format: email
        messageType:
          type: string
          enum: [TEXT, IMAGE, FILE]
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ConversationParticipant:
      type: object
      properties:
        userId:
          type: string
          format: email
        joinedAt:
          type: string
          format: date-time
        role:
          type: string
          enum: [ADMIN, MEMBER]

    PaginationResult:
      type: object
      properties:
        data:
          type: array
          items: {}
        pagination:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            totalPages:
              type: integer
            hasNext:
              type: boolean
            hasPrev:
              type: boolean

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data: {}
        error:
          type: object
          properties:
            message:
              type: string
            code:
              type: string
            details: {}

    AuthRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    RegisterRequest:
      allOf:
        - $ref: '#/components/schemas/AuthRequest'
        - type: object
          required:
            - displayName
          properties:
            displayName:
              type: string
              minLength: 1
              maxLength: 255

    CreateConversationRequest:
      type: object
      required:
        - participantEmails
      properties:
        participantEmails:
          type: array
          items:
            type: string
            format: email
          minItems: 1

    CreateMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
        messageType:
          type: string
          enum: [TEXT, IMAGE, FILE]
          default: TEXT

    SearchResult:
      type: object
      properties:
        id:
          type: string
        conversationId:
          type: string
        senderId:
          type: string
          format: email
        content:
          type: string
        messageType:
          type: string
          enum: [TEXT, IMAGE, FILE]
        createdAt:
          type: string
          format: date-time
        relevanceScore:
          type: number
          minimum: 0
          maximum: 1
        highlights:
          type: array
          items:
            type: string
        conversationContext:
          type: object
          properties:
            participants:
              type: array
              items:
                type: string
            createdAt:
              type: string
              format: date-time

    SearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        query:
          type: string
        totalResults:
          type: integer
        searchTime:
          type: integer
          description: Search execution time in milliseconds

    SearchSuggestion:
      type: object
      properties:
        suggestion:
          type: string
        type:
          type: string
          enum: [recent, topic, user, keyword]
        count:
          type: integer
          description: Number of potential results

    IndexMessageRequest:
      type: object
      required:
        - conversationId
        - messageId
      properties:
        conversationId:
          type: string
          pattern: '^conv_[0-9]+_[a-z0-9]+$'
          description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
          example: 'conv_1750386041311_fpmswok2p'
        messageId:
          type: string
          format: uuid

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            message:
              type: string
            code:
              type: string
            details: {}

    ClickTrackingRequest:
      type: object
      required:
        - query
        - suggestionText
        - suggestionType
      properties:
        query:
          type: string
          description: Original search query that led to the suggestion
          example: "lunch"
        suggestionText:
          type: string
          description: The suggestion that was clicked
          example: "lunch plans"
        suggestionType:
          type: string
          description: Type of suggestion that was clicked
          enum: [recent, topic, user, keyword, completion, popular, trending]
          example: "completion"

    UpdateMessageRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 10000
          description: Updated message content

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          token:
                            type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /conversations:
    get:
      tags:
        - Conversations
      summary: Get user's conversations
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Conversations retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResult'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Conversation'

    post:
      tags:
        - Conversations
      summary: Create a new conversation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConversationRequest'
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Conversation'

  /conversations/{conversationId}/messages:
    get:
      tags:
        - Messages
      summary: Get messages in a conversation
      security:
        - bearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            pattern: '^conv_[0-9]+_[a-z0-9]+$'
            description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
            example: 'conv_1750386041311_fpmswok2p'
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Messages retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/PaginationResult'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Message'

    post:
      tags:
        - Messages
      summary: Send a message to a conversation
      security:
        - bearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            pattern: '^conv_[0-9]+_[a-z0-9]+$'
            description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
            example: 'conv_1750386041311_fpmswok2p'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Message'

  /conversations/{conversationId}/messages/{messageId}:
    get:
      tags:
        - Messages
      summary: Get a specific message in a conversation
      security:
        - bearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            pattern: '^conv_[0-9]+_[a-z0-9]+$'
            description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
            example: 'conv_1750386041311_fpmswok2p'
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            pattern: '^msg_[0-9]+_[a-z0-9]+$'
            description: 'Message ID in format: msg_{timestamp}_{randomString}'
            example: 'msg_1750386041311_abc123def'
      responses:
        '200':
          description: Message retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Message'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Messages
      summary: Update a specific message in a conversation
      security:
        - bearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            pattern: '^conv_[0-9]+_[a-z0-9]+$'
            description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
            example: 'conv_1750386041311_fpmswok2p'
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            pattern: '^msg_[0-9]+_[a-z0-9]+$'
            description: 'Message ID in format: msg_{timestamp}_{randomString}'
            example: 'msg_1750386041311_abc123def'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageRequest'
      responses:
        '200':
          description: Message updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Message'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Messages
      summary: Delete a specific message in a conversation
      security:
        - bearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            pattern: '^conv_[0-9]+_[a-z0-9]+$'
            description: 'Conversation ID in format: conv_{timestamp}_{randomString}'
            example: 'conv_1750386041311_fpmswok2p'
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            pattern: '^msg_[0-9]+_[a-z0-9]+$'
            description: 'Message ID in format: msg_{timestamp}_{randomString}'
            example: 'msg_1750386041311_abc123def'
      responses:
        '204':
          description: Message deleted successfully
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/conversations:
    get:
      tags:
        - Search
      summary: Search conversations with semantic understanding
      description: Perform intelligent search across conversations using natural language queries
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 500
          description: Search query (supports natural language)
          example: "lunch plans with Sarah"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
          description: Maximum number of results to return
      responses:
        '200':
          description: Search results with semantic relevance scoring
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Search service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Search
      summary: Search conversations (POST version for web clients)
      description: Same functionality as GET but via POST to potentially reduce OPTIONS preflight overhead in some scenarios
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - q
              properties:
                q:
                  type: string
                  minLength: 1
                  maxLength: 500
                  description: Search query (supports natural language)
                  example: "lunch plans with Sarah"
                limit:
                  type: integer
                  minimum: 1
                  maximum: 50
                  default: 20
                  description: Maximum number of results to return
      responses:
        '200':
          description: Search results with semantic relevance scoring
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Search service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/suggestions:
    get:
      tags:
        - Search
      summary: Get search suggestions based on user input or default suggestions
      description: Retrieve intelligent search suggestions to help users discover relevant content. Returns default suggestions if no query provided.
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
            minLength: 0
            maxLength: 100
          description: Partial search query for generating suggestions (optional - returns default suggestions if empty)
          example: "lunch"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 5
          description: Maximum number of suggestions to return
      responses:
        '200':
          description: List of search suggestions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchSuggestion'
        '400':
          description: Invalid suggestion parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Search
      summary: Get search suggestions (POST version for web clients)
      description: Same functionality as GET but via POST to potentially reduce OPTIONS preflight overhead in some scenarios
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                q:
                  type: string
                  minLength: 0
                  maxLength: 100
                  description: Partial search query for generating suggestions (optional)
                  example: "lunch"
                limit:
                  type: integer
                  minimum: 1
                  maximum: 10
                  default: 5
                  description: Maximum number of suggestions to return
      responses:
        '200':
          description: List of search suggestions
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/SearchSuggestion'
        '400':
          description: Invalid suggestion parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/suggestions/click:
    post:
      tags:
        - Search
      summary: Track when a user clicks on a search suggestion
      description: Record user interaction with search suggestions for analytics and improving suggestion quality
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClickTrackingRequest'
      responses:
        '200':
          description: Suggestion click tracked successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Suggestion click tracked successfully"
        '400':
          description: Invalid click tracking parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Click tracking service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/index:
    post:
      tags:
        - Search
      summary: Manually trigger indexing of a message
      description: Force re-indexing of a specific message for search functionality
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexMessageRequest'
      responses:
        '200':
          description: Message indexed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Message indexed successfully"
                          messageId:
                            type: string
                            format: uuid
                          conversationId:
                            type: string
                            pattern: '^conv_[0-9]+_[a-z0-9]+$'
        '400':
          description: Invalid indexing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Indexing service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/index-all:
    post:
      tags:
        - Search
      summary: Bulk index all existing messages for search
      description: Index all historical messages to make them searchable. This is useful when setting up search for the first time or after data migration.
      security:
        - bearerAuth: []
      parameters:
        - name: userOnly
          in: query
          schema:
            type: boolean
            default: true
          description: If true, only index messages from the user's conversations. If false, index all messages (admin only).
      responses:
        '200':
          description: Bulk indexing completed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalConversations:
                            type: integer
                            description: Total number of conversations processed
                            example: 15
                          totalMessages:
                            type: integer
                            description: Total number of messages found
                            example: 342
                          indexedMessages:
                            type: integer
                            description: Number of messages successfully indexed
                            example: 340
                          errors:
                            type: array
                            items:
                              type: string
                            description: List of indexing errors (if any)
                            example: []
                          duration:
                            type: integer
                            description: Time taken for bulk indexing in milliseconds
                            example: 5432
                          message:
                            type: string
                            description: Summary message
                            example: "Successfully indexed 340/342 messages across 15 conversations"
        '400':
          description: Invalid bulk indexing parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Bulk indexing service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/performance:
    get:
      tags:
        - Search
      summary: Get search service performance statistics
      description: Retrieve real-time performance metrics for the search service including response times, cache hit rates, and optimization status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Search service performance statistics
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalRequests:
                            type: integer
                            description: Total number of search requests processed
                            example: 1524
                          avgResponseTime:
                            type: number
                            format: float
                            description: Average response time in milliseconds
                            example: 8.5
                          cacheHits:
                            type: integer
                            description: Number of requests served from cache
                            example: 1234
                          cacheHitRate:
                            type: number
                            format: float
                            description: Cache hit rate as a percentage
                            example: 81.0
                          cacheSize:
                            type: integer
                            description: Current number of items in cache
                            example: 156
                          target:
                            type: string
                            description: Target response time for performance
                            example: "10ms"
                          status:
                            type: string
                            enum: [OPTIMAL, ACCEPTABLE, NEEDS_OPTIMIZATION]
                            description: Current performance status
                            example: "OPTIMAL"
                          lastReset:
                            type: string
                            format: date-time
                            description: Timestamp when performance stats were last reset
                            example: "2024-01-15T10:30:00Z"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Performance service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 